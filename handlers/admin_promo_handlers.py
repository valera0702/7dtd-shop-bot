# handlers/promo_handlers.py

from aiogram import F, Router
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.utils.keyboard import InlineKeyboardBuilder, InlineKeyboardButton
from datetime import datetime
from states import CreatePromo
from database import db
from keyboards import admin_main_menu, admin_promos_menu, admin_cancel_action, main_menu
from callbacks import PromoCallback

router = Router()



# === 2. –û–ë–†–ê–ë–û–¢–ö–ê –í–•–û–î–ê –í –†–ê–ó–î–ï–õ "–ü–†–û–ú–û–ö–û–î–´" ===
@router.message(F.text == "üé´ –ü—Ä–æ–º–æ–∫–æ–¥—ã")
async def admin_promos_handler(message: Message):
    await message.answer("üé´ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏:", reply_markup=admin_promos_menu())

@router.callback_query(F.data == "manage_promo_codes")
async def back_to_promos_menu(callback: CallbackQuery):
    await callback.message.edit_text("üé´ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏:", reply_markup=admin_promos_menu())
    await callback.answer()

# === 3. –ü–†–û–¶–ï–°–° –°–û–ó–î–ê–ù–ò–Ø –ü–†–û–ú–û–ö–û–î–ê (FSM) ===

# –®–∞–≥ 1: –ù–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥"
@router.callback_query(F.data == "create_promo")
async def start_creating_promo(callback: CallbackQuery, state: FSMContext):
    await state.set_state(CreatePromo.waiting_promo_type)
    builder = InlineKeyboardBuilder()
    builder.button(text="–ë–∞–ª–∞–Ω—Å", callback_data=PromoCallback(action="select_type", value="balance").pack())
    builder.button(text="–°–∫–∏–¥–∫–∞", callback_data=PromoCallback(action="select_type", value="discount").pack())
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=PromoCallback(action="cancel_creation").pack())
    builder.adjust(2, 1)
    
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ–º–æ–∫–æ–¥–∞:", reply_markup=builder.as_markup())
    await callback.answer()

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ—Ç–º–µ–Ω—ã —Å–æ–∑–¥–∞–Ω–∏—è
@router.callback_query(PromoCallback.filter(F.action == "cancel_creation"), CreatePromo.waiting_promo_type)
async def cancel_promo_creation(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text("–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=admin_promos_menu())
    await callback.answer()

# –®–∞–≥ 2: –í—ã–±–æ—Ä —Ç–∏–ø–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞
@router.callback_query(PromoCallback.filter(F.action == "select_type"))
async def process_promo_type(callback: CallbackQuery, callback_data: PromoCallback, state: FSMContext):
    await state.update_data(promo_type=callback_data.value)
    await state.set_state(CreatePromo.waiting_promo_code)
    await callback.message.edit_text("üîë –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø—Ä–æ–º–æ–∫–æ–¥–∞:", reply_markup=admin_cancel_action())
    await callback.answer()

# –®–∞–≥–∏ 3-7 (–ª–æ–≥–∏–∫–∞ FSM) –æ—Å—Ç–∞—é—Ç—Å—è –ø–æ—á—Ç–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, —Ç–æ–ª—å–∫–æ —É–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–µ–µ
@router.message(CreatePromo.waiting_promo_code)
async def process_promo_code(message: Message, state: FSMContext):
    if db.get_promocode(message.text):
        await message.answer(f"‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ '{message.text}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç! –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π:")
        return
    await state.update_data(code=message.text)
    await state.set_state(CreatePromo.waiting_promo_value)
    await message.answer("üí∞ –í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ (—Å—É–º–º–∞ –¥–ª—è '–ë–∞–ª–∞–Ω—Å', –ø—Ä–æ—Ü–µ–Ω—Ç –¥–ª—è '–°–∫–∏–¥–∫–∞'):")

@router.message(CreatePromo.waiting_promo_value)
async def process_promo_value(message: Message, state: FSMContext):
    try:
        value = float(message.text)
        await state.update_data(value=value)
        await state.set_state(CreatePromo.waiting_promo_expiration)
        await message.answer("üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏—Å—Ç–µ—á–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ú–ú–î–î (–Ω–∞–ø—Ä–∏–º–µ—Ä, 251231) –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '0' –¥–ª—è –±–µ—Å—Å—Ä–æ—á–Ω–æ–≥–æ:")
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")

@router.message(CreatePromo.waiting_promo_expiration)
async def process_promo_expiration(message: Message, state: FSMContext):
    expiration = None
    if message.text != "0":
        try:
            expiration_date = datetime.strptime(message.text, "%y%m%d")
            expiration = expiration_date.strftime("%Y-%m-%d")
        except ValueError:
            await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –ì–ì–ú–ú–î–î –∏–ª–∏ '0'.")
            return
    
    await state.update_data(expiration=expiration)
    await state.set_state(CreatePromo.waiting_promo_max_uses)
    await message.answer("üî¢ –í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π (–æ—Ç–ø—Ä–∞–≤—å—Ç–µ '0' –¥–ª—è –±–µ–∑–ª–∏–º–∏—Ç–Ω–æ–≥–æ):")

@router.message(CreatePromo.waiting_promo_max_uses)
async def process_promo_max_uses(message: Message, state: FSMContext):
    try:
        max_uses = int(message.text)
        data = await state.get_data()
        
        db.add_promocode(
            code=data['code'],
            promo_type=data['promo_type'],
            value=data['value'],
            expiration_date=data.get('expiration'),
            max_uses=max_uses
        )
        await message.answer(f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ '{data['code']}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!", reply_markup=admin_promos_menu())
        await state.clear()
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.")


# === 4. –ü–†–û–°–ú–û–¢–† –ò –£–î–ê–õ–ï–ù–ò–ï –ü–†–û–ú–û–ö–û–î–û–í ===

@router.callback_query(F.data == "list_promos")
async def list_promocodes(callback: CallbackQuery):
    promocodes = db.get_promocodes_list()
    if not promocodes:
        await callback.message.edit_text("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤.", reply_markup=admin_promos_menu())
        return
        
    builder = InlineKeyboardBuilder()
    for promo in promocodes:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º–µ–Ω–∞ –ø–æ–ª–µ–π –≤–º–µ—Å—Ç–æ –∏–Ω–¥–µ–∫—Å–æ–≤
        builder.button(
            text=f"{promo['code']} ({promo['type']})", 
            callback_data=PromoCallback(action="view", id=promo['id']).pack()
        )
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="manage_promo_codes")
    builder.adjust(2, 1)
    
    await callback.message.edit_text("üìã –°–ø–∏—Å–æ–∫ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤:", reply_markup=builder.as_markup())
    await callback.answer()

@router.callback_query(PromoCallback.filter(F.action == "view"))
async def show_promo_detail(callback: CallbackQuery, callback_data: PromoCallback):
    promo = db.get_promocode_by_id(callback_data.id)
    if not promo:
        await callback.answer("‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
        return
        
    text = (
        f"üîë –ü—Ä–æ–º–æ–∫–æ–¥: <b>{promo['code']}</b>\n"
        f"üìù –¢–∏–ø: {promo['type']}\n"
        f"üí∞ –ó–Ω–∞—á–µ–Ω–∏–µ: {promo['value']}\n"
        f"üìÖ –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: {promo['expiration_date'] or '–ë–µ—Å—Å—Ä–æ—á–Ω—ã–π'}\n"
        f"üî¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {promo['uses']}/{promo['max_uses'] if promo['max_uses'] > 0 else '‚àû'}"
    )
    builder = InlineKeyboardBuilder()
    builder.button(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=PromoCallback(action="delete", id=promo['id']).pack())
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="list_promos")
    builder.adjust(1)
    
    await callback.message.edit_text(text, reply_markup=builder.as_markup())
    await callback.answer()

@router.callback_query(PromoCallback.filter(F.action == "delete"))
async def delete_promocode_prompt(callback: CallbackQuery, callback_data: PromoCallback):
    builder = InlineKeyboardBuilder()
    builder.button(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=PromoCallback(action="confirm_delete", id=callback_data.id).pack())
    builder.button(text="‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞", callback_data=PromoCallback(action="view", id=callback_data.id).pack())
    await callback.message.edit_text("‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥?", reply_markup=builder.as_markup())

@router.callback_query(PromoCallback.filter(F.action == "confirm_delete"))
async def confirm_delete_promocode(callback: CallbackQuery, callback_data: PromoCallback):
    db.delete_promocode(callback_data.id)
    await callback.message.edit_text("‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!", reply_markup=admin_promos_menu())

# === 5. –û–ë–†–ê–ë–û–¢–ß–ò–ö –î–õ–Ø –ö–ù–û–ü–ö–ò –ì–õ–ê–í–ù–û–ì–û –ú–ï–ù–Æ ===
@router.message(F.text == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def back_to_main_menu(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu())