from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command, StateFilter
from datetime import datetime
from config import ADMIN_IDS
from states import AddProduct, CreatePromo, AddCategory, ManageCategory, AddSubcategory, EditSubcategory #EditProduct
from database import db
from keyboards import admin_main_menu, admin_promos_menu, admin_promos_list, admin_products_menu, admin_categories_menu, admin_category, admin_podcategory, admin_products_edit, admin_cancel_action, main_menu, admin_skip
from aiogram.utils.keyboard import InlineKeyboardBuilder
from typing import Union

router = Router()

async def check_admin(user_id: int, message: Message) -> bool:
    if user_id not in ADMIN_IDS:
        await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω!")
        return False
    return True

@router.message(Command("admin"))
async def admin_command(message: Message):
    if not await check_admin(message.from_user.id, message): 
        return
    await message.answer("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=admin_main_menu())

@router.message(F.text == "üõí –¢–æ–≤–∞—Ä—ã")
@router.callback_query(F.data == "üõí –¢–æ–≤–∞—Ä—ã")
async def admin_products_handler(event: Union[Message, CallbackQuery]):
    user_id = event.from_user.id
    message = event.message if isinstance(event, CallbackQuery) else event
    if not await check_admin(user_id, message):
        return
    if isinstance(event, CallbackQuery):
        await event.answer()
    text = "üõí –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏:"
    markup = admin_products_menu()
    if isinstance(event, CallbackQuery):
        await event.message.edit_text(text, reply_markup=markup)
    else:
        await message.answer(text, reply_markup=markup)

@router.message(F.text == "üé´ –ü—Ä–æ–º–æ–∫–æ–¥—ã")
async def admin_promos_handler(message: Message):
    if not await check_admin(message.from_user.id, message): 
        return
    await message.answer("üé´ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏:", reply_markup=admin_promos_menu())

@router.message(F.text == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def back_to_main_menu(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_menu())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
@router.callback_query(F.data == "create_promo")
async def start_creating_promo(callback: CallbackQuery, state: FSMContext):
    if not await check_admin(callback.from_user.id, callback.message): 
        return
    
    await state.set_state(CreatePromo.waiting_promo_type)
    builder = InlineKeyboardBuilder()
    builder.button(text="balance", callback_data="promo_type_balance")
    builder.button(text="discount", callback_data="promo_type_discount")
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_cancel")
    builder.adjust(2)
    
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ–º–æ–∫–æ–¥–∞:", reply_markup=builder.as_markup())
    await callback.answer()

@router.callback_query(F.data.startswith("promo_type_"))
async def process_promo_type(callback: CallbackQuery, state: FSMContext):
    promo_type = callback.data.split("_")[2]
    await state.update_data(promo_type=promo_type)
    await state.set_state(CreatePromo.waiting_promo_code)
    await callback.message.edit_text("üîë –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø—Ä–æ–º–æ–∫–æ–¥–∞:", reply_markup=admin_cancel_action())
    await callback.answer()

@router.message(CreatePromo.waiting_promo_code)
async def process_promo_code(message: Message, state: FSMContext):
    if db.get_promocode(message.text):
        await message.answer(f"‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ '{message.text}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç! –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π:")
        return
    await state.update_data(code=message.text)
    await state.set_state(CreatePromo.waiting_promo_value)
    await message.answer("üí∞ –í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ (—Å—É–º–º–∞ –¥–ª—è balance, –ø—Ä–æ—Ü–µ–Ω—Ç –¥–ª—è discount):")

@router.message(CreatePromo.waiting_promo_value)
async def process_promo_value(message: Message, state: FSMContext):
    try:
        value = float(message.text)
        await state.update_data(value=value)
        await state.set_state(CreatePromo.waiting_promo_expiration)
        await message.answer("üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏—Å—Ç–µ—á–µ–Ω–∏—è (–ì–ì–ú–ú–î–î) –∏–ª–∏ '0' –¥–ª—è –±–µ—Å—Å—Ä–æ—á–Ω–æ–≥–æ:")
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")

@router.message(CreatePromo.waiting_promo_expiration)
async def process_promo_expiration(message: Message, state: FSMContext):
    expiration = None
    if message.text != "0" and message.text.isdigit() and len(message.text) == 6:
        yy, mm, dd = message.text[:2], message.text[2:4], message.text[4:6]
        try:
            datetime.strptime(f"20{yy}-{mm}-{dd}", "%Y-%m-%d")
            expiration = f"20{yy}-{mm}-{dd}"
        except ValueError:
            await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞")
            return
    
    await state.update_data(expiration=expiration)
    await state.set_state(CreatePromo.waiting_promo_max_uses)
    await message.answer("üî¢ –í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å. –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ (0 - –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π):")

@router.message(CreatePromo.waiting_promo_max_uses)
async def process_promo_max_uses(message: Message, state: FSMContext):
    try:
        data = await state.get_data()
        max_uses = int(message.text)
        db.add_promocode(
            code=data['code'],
            promo_type=data['promo_type'],
            value=data['value'],
            expiration_date=data['expiration'],
            max_uses=max_uses if max_uses > 0 else 1000000
        )
        await message.answer(f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ {data['code']} —Å–æ–∑–¥–∞–Ω!", reply_markup=admin_main_menu())
        await state.clear()
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ")

@router.callback_query(F.data == "list_promos")
async def list_promocodes(callback: CallbackQuery):
    if not await check_admin(callback.from_user.id, callback.message): 
        return
        
    promocodes = db.get_promocodes_list()
    if not promocodes:
        await callback.message.edit_text("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤", reply_markup=admin_promos_menu())
        return
        
    builder = InlineKeyboardBuilder()
    for promo in promocodes:
        builder.button(text=f"{promo[1]} ({promo[2]})", callback_data=f"promo_detail_{promo[0]}")
    builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_promos_menu")
    builder.adjust(2)
    
    await callback.message.edit_text("üìã –°–ø–∏—Å–æ–∫ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤:", reply_markup=builder.as_markup())
    await callback.answer()

@router.callback_query(F.data.startswith("promo_detail_"))
async def show_promo_detail(callback: CallbackQuery):
    promo_id = int(callback.data.split("_")[2])
    promo = db.get_promocode_by_id(promo_id)
    if not promo:
        await callback.answer("‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
        return
        
    text = (
        f"üîë –ü—Ä–æ–º–æ–∫–æ–¥: {promo[1]}\n"
        f"üìù –¢–∏–ø: {promo[2]}\n"
        f"üí∞ –ó–Ω–∞—á–µ–Ω–∏–µ: {promo[3]}\n"
        f"üìÖ –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: {promo[4] or '–ë–µ—Å—Å—Ä–æ—á–Ω—ã–π'}\n"
        f"üî¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {promo[6]}/{promo[5] if promo[5] > 0 else '‚àû'}\n"
        f"üÜî ID: {promo[0]}"
    )
    
    await callback.message.edit_text(text, reply_markup=admin_promos_list(promo_id))
    await callback.answer()

@router.callback_query(F.data.startswith("delete_promo_"))
async def delete_promocode(callback: CallbackQuery):
    promo_id = int(callback.data.split("_")[2])
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete_{promo_id}")],
        [InlineKeyboardButton(text="‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞", callback_data=f"promo_detail_{promo_id}")]
    ])
    await callback.message.edit_text("‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥?", reply_markup=keyboard)

@router.callback_query(F.data.startswith("confirm_delete_"))
async def confirm_delete_promocode(callback: CallbackQuery):
    promo_id = int(callback.data.split("_")[2])
    db.delete_promocode(promo_id)
    await callback.message.edit_text("‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!", reply_markup=admin_promos_menu())

@router.callback_query(F.data == "edit_promo")
async def edit_promocode(callback: CallbackQuery):
    # –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞
    await callback.answer("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", show_alert=True)

@router.callback_query(F.data == "back_to_promos_menu")
async def back_to_promos_menu(callback: CallbackQuery):
    await callback.message.edit_text("üé´ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏:", reply_markup=admin_promos_menu())
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤
@router.callback_query(F.data == "add_product")
async def start_adding_product(callback: CallbackQuery, state: FSMContext):
    categories = db.get_all_categories()
    
    builder = InlineKeyboardBuilder()
    for cat in categories:
        builder.button(text=cat[1], callback_data=f"product_cat_{cat[0]}")
    builder.button(text="–ù–∞–∑–∞–¥", callback_data="üõí –¢–æ–≤–∞—Ä—ã")
    builder.adjust(1)
    
    await state.set_state(AddProduct.category)
    await callback.message.edit_text("üìÅ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —Ç–æ–≤–∞—Ä–∞:", reply_markup=builder.as_markup())
    await callback.answer()

@router.callback_query(AddProduct.category, F.data.startswith("product_cat_"))
async def process_category(callback: CallbackQuery, state: FSMContext):
    cat_id = callback.data.split("_")[2]
    if cat_id == "0":
        cat_id = None
    else:
        cat_id = int(cat_id)
    
    await state.update_data(category_id=cat_id)
    
    if cat_id:
        subcategories = db.get_subcategories(cat_id)
        
        if subcategories:
            builder = InlineKeyboardBuilder()
            for subcat in subcategories:
                # –ò–∑–º–µ–Ω—è–µ–º —Ñ–æ—Ä–º–∞—Ç callback_data
                builder.button(text=subcat[1], callback_data=f"product_subcat_{cat_id}_{subcat[0]}")
            # –ò–∑–º–µ–Ω—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–ª—è "–ë–µ–∑ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
            builder.button(text="–ë–µ–∑ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data=f"product_subcat_{cat_id}_0")
            builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_cancel")
            builder.adjust(1)
            
            await state.set_state(AddProduct.subcategory)
            await callback.message.edit_text("üìÇ –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —Ç–æ–≤–∞—Ä–∞:", reply_markup=builder.as_markup())
            await callback.answer()
            return
    
    await state.set_state(AddProduct.name)
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:", reply_markup=admin_cancel_action())
    await callback.answer()

@router.callback_query(AddProduct.subcategory, F.data.startswith("product_subcat_"))
async def process_subcategory(callback: CallbackQuery, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —á–∞—Å—Ç–∏ callback_data
    parts = callback.data.split("_")
    # parts[0] = "product"
    # parts[1] = "subcat"
    # parts[2] = ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    # parts[3] = ID –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —á–∞—Å—Ç–µ–π
    if len(parts) < 4:
        await callback.answer("–û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
        return
    
    cat_id = int(parts[2])
    subcat_id = parts[3]
    
    if subcat_id == "0":
        subcat_id = None
    else:
        subcat_id = int(subcat_id)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å –æ–±–æ–∏–º–∏ ID
    await state.update_data(
        category_id=cat_id,
        subcategory_id=subcat_id
    )
    
    await state.set_state(AddProduct.name)
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:", reply_markup=admin_cancel_action())
    await callback.answer()


@router.message(AddProduct.name)
async def process_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(AddProduct.description)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")

@router.message(AddProduct.description)
async def process_description(message: Message, state: FSMContext):
    await state.update_data(description=message.text)
    await state.set_state(AddProduct.price)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞:")

@router.message(AddProduct.price)
async def process_price(message: Message, state: FSMContext):
    try:
        price = float(message.text)
        await state.update_data(price=price)
        await state.set_state(AddProduct.command_template)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —à–∞–±–ª–æ–Ω –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞ (–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ {nickname} –∏ {quantity}):\n–ü—Ä–∏–º–µ—Ä: give {nickname} apple {quantity}")
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")

@router.message(AddProduct.command_template)
async def process_command_template(message: Message, state: FSMContext):
    data = await state.get_data()
    db.add_product(
        name=data['name'],
        description=data['description'],
        price=data['price'],
        command_template=message.text,
        category_id=data['category_id'],
        subcategory_id=data.get('subcategory_id')  # –º–æ–∂–µ—Ç –±—ã—Ç—å None
    )
    await message.answer("‚úÖ –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!", reply_markup=admin_main_menu())
    await state.clear()

@router.callback_query(F.data == "list_product")
async def list_products(callback: CallbackQuery):
    categories = db.get_all_categories()
    
    if not categories:
        await callback.message.edit_text("‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", reply_markup=admin_products_menu())
        return
        
    builder = InlineKeyboardBuilder()
    for cat in categories:
        builder.button(text=cat[1], callback_data=f"category_{cat[0]}")
    builder.button(text="–ù–∞–∑–∞–¥", callback_data="üõí –¢–æ–≤–∞—Ä—ã")
    builder.button(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="add_category")
    builder.adjust(2)
    
    await callback.message.edit_text("üìÅ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=builder.as_markup())
    await callback.answer()

@router.callback_query(F.data.startswith("category_"))
async def show_category_products(callback: CallbackQuery):
    category_id = int(callback.data.split("_")[1])
    category = db.get_category(category_id)
    
    if not category:
        await callback.answer("‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    
    products = db.get_products_by_category(category_id)
    subcategories = db.get_subcategories(category_id)
    
    builder = InlineKeyboardBuilder()
    
    for subcat in subcategories:
        builder.button(text=f"üìÇ {subcat[1]}", callback_data=f"subcategory_{subcat[0]}")
    for product in products:
        builder.button(text=f"üõí {product[1]} - {product[3]} —Ä—É–±", callback_data=f"show_product_{product[0]}")
    
    # –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    builder.button(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data=f"add_subcategory_{category_id}")
    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
    builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="list_product")
    
    builder.adjust(1)
    
    text = f"üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category[1]}\n\n"
    
    if subcategories:
        text += "–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏:\n"
    
    if products:
        text += "\n–¢–æ–≤–∞—Ä—ã –±–µ–∑ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏:"
    
    await callback.message.edit_text(
        text,
        reply_markup=builder.as_markup()
    )
    await callback.answer()


@router.callback_query(F.data.startswith("show_product_"))
async def show_product_details(callback: CallbackQuery):
    try:
        # –ü–æ–ª—É—á–∞–µ–º ID –ø—Ä–æ–¥—É–∫—Ç–∞ –∏–∑ callback_data
        product_id = int(callback.data.split("_")[2])
    except (IndexError, ValueError):
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
        return
    
    product = db.get_product(product_id)
    
    if not product:
        await callback.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    text = (
        f"üõí <b>{product[1]}</b>\n\n"
        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {product[2] or '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}\n"
        f"üí∞ –¶–µ–Ω–∞: {product[3]} —Ä—É–±\n"
        f"‚öôÔ∏è –ö–æ–º–∞–Ω–¥–∞: {product[4]}"
    )
    
    await callback.message.edit_text(text, reply_markup=admin_products_edit(product_id))
    await callback.answer()

@router.callback_query(F.data.startswith("product_"))
async def show_product_details(callback: CallbackQuery):
    product_id = int(callback.data.split("_")[1])
    product = db.get_product(product_id)
    
    if not product:
        await callback.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    text = (
        f"üõí <b>{product[1]}</b>\n\n"
        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {product[2] or '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}\n"
        f"üí∞ –¶–µ–Ω–∞: {product[3]} —Ä—É–±\n"
        f"‚öôÔ∏è –ö–æ–º–∞–Ω–¥–∞: {product[4]}"
    )
    
    await callback.message.edit_text(text, reply_markup=admin_products_edit(product_id))
    await callback.answer()

@router.callback_query(F.data.startswith("add_subcategory_"))
async def start_adding_subcategory(callback: CallbackQuery, state: FSMContext):
    category_id = int(callback.data.split("_")[2])
    await state.set_state(AddSubcategory.name)
    await state.update_data(category_id=category_id)
    await callback.message.edit_text("üìÇ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏:")
    await callback.answer()

@router.message(AddSubcategory.name)
async def process_subcategory_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(AddSubcategory.description)
    await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–∏–ª–∏ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å'):", reply_markup=admin_skip())

@router.message(AddSubcategory.description)
async def process_subcategory_description(message: Message, state: FSMContext):
    data = await state.get_data()
    description = "" if message.text == "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å" else message.text
    db.add_subcategory(data['name'], data['category_id'], description)
    await message.answer(f"‚úÖ –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è '{data['name']}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!", reply_markup=admin_main_menu())
    await state.clear()

@router.callback_query(F.data.startswith("edit_products_"))
async def edit_product_handler(callback: CallbackQuery):
    product_id = int(callback.data.split("_")[2])
    # –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
    await callback.answer("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", show_alert=True)

@router.callback_query(F.data.startswith("delete_products_"))
async def delete_product_handler(callback: CallbackQuery):
    product_id = int(callback.data.split("_")[2])
    db.delete_product(product_id)
    await callback.message.edit_text("‚úÖ –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!", reply_markup=admin_products_menu())
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
@router.callback_query(F.data == "add_category")
async def start_adding_category(callback: CallbackQuery, state: FSMContext):
    await state.set_state(AddCategory.name)
    await callback.message.edit_text("üìÅ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:", reply_markup=admin_cancel_action())
    await callback.answer()

@router.message(AddCategory.name)
async def process_category_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(AddCategory.description)
    await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–∏–ª–∏ '-' –ø—Ä–æ—á–µ—Ä–∫):")

@router.callback_query(F.data.startswith("subcategory_"))
async def show_subcategory(callback: CallbackQuery):
    subcategory_id = int(callback.data.split("_")[1])
    subcategory = db.get_subcategory(subcategory_id)
    
    if not subcategory:
        await callback.answer("‚ùå –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∏–º–µ–Ω–Ω–æ —ç—Ç–æ–π –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    products = db.get_products_by_subcategory(subcategory_id)
    
    builder = InlineKeyboardBuilder()
    
    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    for product in products:
        builder.button(text=f"üõí {product[1]} - {product[3]} —Ä—É–±", callback_data=f"show_product_{product[0]}")
    
    builder.button(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data=f"edit_subcategory_{subcategory_id}")
    builder.button(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data=f"delete_subcategory_{subcategory_id}")
    builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data=f"category_{subcategory['category_id']}")
    builder.adjust(1)
    
    await callback.message.edit_text(
        f"üìÇ –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è: {subcategory[1]}\n\n"
        f"{subcategory[2] or '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}\n\n"
        f"–¢–æ–≤–∞—Ä—ã ({len(products)}):",
        reply_markup=builder.as_markup()
    )
    await callback.answer()



@router.callback_query(F.data.startswith("delete_subcategory_"))
async def delete_subcategory_handler(callback: CallbackQuery):
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ callback_data
        subcategory_id = int(callback.data.split("_")[2])
    except (IndexError, ValueError):
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    subcategory = db.get_subcategory(subcategory_id)
    
    if not subcategory:
        await callback.answer("‚ùå –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    
    # –ü–µ—Ä–µ–º–µ—â–∞–µ–º —Ç–æ–≤–∞—Ä—ã –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    db.move_products_to_category(subcategory_id, subcategory['category_id'])
    
    # –£–¥–∞–ª—è–µ–º –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é
    db.delete_subcategory(subcategory_id)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
    await callback.message.edit_text(
        f"‚úÖ –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è —É–¥–∞–ª–µ–Ω–∞! –¢–æ–≤–∞—Ä—ã –ø–µ—Ä–µ–º–µ—â–µ–Ω—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é.",
        reply_markup=admin_categories_menu()
    )
    await callback.answer()


@router.message(AddCategory.description)
async def process_category_description(message: Message, state: FSMContext):
    data = await state.get_data()
    description = "" if message.text == "-" else message.text
    db.add_category(data['name'], description)
    await message.answer(f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è '{data['name']}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!", reply_markup=admin_categories_menu())
    await state.clear()

@router.callback_query(F.data == "admin_cancel")
async def admin_cancel_handler(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=admin_main_menu())
    await callback.answer()

@router.callback_query(F.data == "back_to_products_menu")
async def back_to_products_menu(callback: CallbackQuery):
    await callback.message.edit_text("üõí –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏:", reply_markup=admin_products_menu())
    await callback.answer()