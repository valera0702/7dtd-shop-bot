# -*- coding: utf-8 -*-
from aiogram import F, Router
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.utils.keyboard import InlineKeyboardBuilder, InlineKeyboardButton
from aiogram.filters import Command
from states import AddProduct, AddCategory, AddSubcategory
from database import db
from keyboards import admin_main_menu, admin_products_menu, admin_categories_menu, admin_subcategories_menu, admin_cancel_action
from callbacks import CategoryCallback, ProductCallback, SubcategoryCallback
from config import ADMIN_IDS

router = Router()



# =================================================================================
# ### 2. –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê ###
# =================================================================================

@router.message(Command("admin"))
async def admin_panel(message: Message):
    if message.from_user.id in ADMIN_IDS:
        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å!", reply_markup=admin_main_menu())
    else:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")

@router.callback_query(F.data == "admin_main_menu")
async def back_to_admin_main_menu(callback: CallbackQuery):
    await callback.message.edit_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å!", reply_markup=admin_main_menu())
    await callback.answer()


# =================================================================================
# ### 3. –£–ü–†–ê–í–õ–ï–ù–ò–ï –¢–û–í–ê–†–ê–ú–ò (–ü–†–û–°–ú–û–¢–† –ò –ù–ê–í–ò–ì–ê–¶–ò–Ø) ###
# =================================================================================

@router.callback_query(F.data == "manage_products")
async def manage_products(callback: CallbackQuery):
    await callback.message.edit_text("üõí –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏", reply_markup=admin_products_menu())
    await callback.answer()
@router.message(F.text == "üõí –¢–æ–≤–∞—Ä—ã")
async def manage_products_text(message: Message):
    await message.answer("üõí –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏", reply_markup=admin_products_menu())


@router.callback_query(F.data == "list_product")
async def list_products(callback: CallbackQuery):
    categories = db.get_all_categories()
    if not categories:
        await callback.message.edit_text("‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", reply_markup=admin_products_menu())
        return

    builder = InlineKeyboardBuilder()
    for cat in categories:
        builder.button(
            text=cat['name'],
            callback_data=CategoryCallback(id=cat['id'], action="view_products_in_cat").pack()
        )
    builder.button(text="–ù–∞–∑–∞–¥", callback_data="manage_products")
    builder.adjust(2, 1)
    await callback.message.edit_text("üìÅ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:", reply_markup=builder.as_markup())
    await callback.answer()

@router.callback_query(CategoryCallback.filter(F.action == "view_products_in_cat"))
async def view_products_in_category(callback: CallbackQuery, callback_data: CategoryCallback):
    category_id = callback_data.id
    subcategories = db.get_subcategories(category_id)
    products = db.get_products_by_category(category_id)
    category_name = db.get_category_name(category_id)
    
    title = f"–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π ¬´{category_name}¬ª:" if category_name else "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π:"
    builder = InlineKeyboardBuilder()

    if not subcategories and not products:
        title += "\n\n‚ÑπÔ∏è –í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –ø—É—Å—Ç–æ."
    else:
        for subcat in subcategories:
            builder.button(
                text=f"üìÇ {subcat['name']}",
                callback_data=SubcategoryCallback(id=subcat['id'], action="view_products_in_subcat").pack()
            )
        for prod in products:
            builder.button(
                text=prod['name'],
                callback_data=ProductCallback(id=prod['id'], action="manage").pack()
            )

    builder.row(
        InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data="add_product"),
        InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data=CategoryCallback(id=category_id, action="add_sub_here").pack())
    )
    builder.row(
        InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data=f"edit_category_{category_id}"),
        InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data=f"delete_category_{category_id}")
    )
    builder.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="list_product"))
    builder.adjust(1, 2, 1)

    await callback.message.edit_text(title, reply_markup=builder.as_markup())
    await callback.answer()

@router.callback_query(SubcategoryCallback.filter(F.action == "view_products_in_subcat"))
async def view_products_in_subcategory(callback: CallbackQuery, callback_data: SubcategoryCallback):
    subcategory_id = callback_data.id
    products = db.get_products_by_subcategory(subcategory_id)
    subcategory_info = db.get_subcategory_info(subcategory_id)

    if not subcategory_info:
        await callback.answer("‚ùå –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
        return

    title = f"–¢–æ–≤–∞—Ä—ã –≤ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ¬´{subcategory_info['name']}¬ª:"
    builder = InlineKeyboardBuilder()

    if not products:
        title += "\n\n‚ÑπÔ∏è –ó–¥–µ—Å—å –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤."
    else:
        for prod in products:
            builder.button(
                text=prod['name'],
                callback_data=ProductCallback(id=prod['id'], action="manage").pack()
            )
    
    builder.button(
        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é", 
        callback_data=CategoryCallback(id=subcategory_info['category_id'], action="view_products_in_cat").pack()
    )
    builder.adjust(1)
    await callback.message.edit_text(title, reply_markup=builder.as_markup())
    await callback.answer()

@router.callback_query(ProductCallback.filter(F.action == "manage"))
async def show_product_details(callback: CallbackQuery, callback_data: ProductCallback):
    product_id = callback_data.id
    product = db.get_product(product_id)
    
    if not product:
        await callback.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        await callback.message.edit_text("–¢–æ–≤–∞—Ä –±—ã–ª —É–¥–∞–ª–µ–Ω.", reply_markup=None)
        return
        
    price_line = f"üí∞ –¶–µ–Ω–∞: {product['price']} RUB"
    if product['count'] > 1:
        price_line += f" (–∑–∞ {product['count']} —à—Ç.)"

    quality_line = ""
    if product['quality'] > 1:
        quality_line = f"‚≠ê –ö–∞—á–µ—Å—Ç–≤–æ: {product['quality']}\n"
        
    text = (
        f"–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–º: <b>{product['name']}</b>\n\n"
        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {product['description']}\n"
        f"{price_line}\n"
        f"{quality_line}"
        f"‚öôÔ∏è –ö–æ–º–∞–Ω–¥–∞: {product['rcon_command']}"
    )
    builder = InlineKeyboardBuilder()
    builder.button(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_product_{product_id}")
    builder.button(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data=f"edit_product_{product_id}")

    if product['subcategory_id']:
        builder.button(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏",
            callback_data=SubcategoryCallback(id=product['subcategory_id'], action="view_products_in_subcat").pack()
        )
    else:
        builder.button(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏",
            callback_data=CategoryCallback(id=product['category_id'], action="view_products_in_cat").pack()
        )
    builder.adjust(2, 1)
    await callback.message.edit_text(text, reply_markup=builder.as_markup())
    await callback.answer()


# =================================================================================
# ### 4. –£–ü–†–ê–í–õ–ï–ù–ò–ï –¢–û–í–ê–†–ê–ú–ò (–ü–†–û–¶–ï–°–° –î–û–ë–ê–í–õ–ï–ù–ò–Ø - FSM) ###
# =================================================================================

# –®–∞–≥ 1: –ù–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä"
@router.callback_query(F.data == "add_product")
async def start_adding_product(callback: CallbackQuery, state: FSMContext):
    categories = db.get_all_categories()
    if not categories:
        await callback.message.edit_text("–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", reply_markup=admin_products_menu())
        return

    builder = InlineKeyboardBuilder()
    for cat in categories:
        builder.button(text=cat['name'], callback_data=CategoryCallback(id=cat['id'], action="add_product_to_cat").pack())
    builder.button(text="–ù–∞–∑–∞–¥", callback_data="manage_products")
    builder.adjust(2)

    await callback.message.edit_text("üìÅ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —Ç–æ–≤–∞—Ä–∞:", reply_markup=builder.as_markup())
    await state.set_state(AddProduct.choosing_category)
    await callback.answer()

# –®–∞–≥ 2: –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@router.callback_query(CategoryCallback.filter(F.action == "add_product_to_cat"), AddProduct.choosing_category)
async def process_category(callback: CallbackQuery, callback_data: CategoryCallback, state: FSMContext):
    cat_id = callback_data.id
    await state.update_data(category_id=cat_id)
    subcategories = db.get_subcategories(cat_id)
    
    if subcategories:
        builder = InlineKeyboardBuilder()
        for subcat in subcategories:
            builder.button(
                text=subcat['name'],
                callback_data=SubcategoryCallback(id=subcat['id'], action="select_for_product").pack()
            )
        builder.button(text="–ù–∞–∑–∞–¥", callback_data="add_product")
        builder.adjust(2)
        await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=builder.as_markup())
        await state.set_state(AddProduct.choosing_subcategory)
    else:
        await callback.message.edit_text("–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")
        await state.set_state(AddProduct.entering_name)
    await callback.answer()

# –®–∞–≥ 3: –í—ã–±–æ—Ä –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@router.callback_query(SubcategoryCallback.filter(F.action == "select_for_product"), AddProduct.choosing_subcategory)
async def process_subcategory_choice(callback: CallbackQuery, callback_data: SubcategoryCallback, state: FSMContext):
    await state.update_data(subcategory_id=callback_data.id)
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")
    await state.set_state(AddProduct.entering_name)
    await callback.answer()

# –®–∞–≥ 4: –í–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è
@router.message(AddProduct.entering_name)
async def process_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    skip_keyboard = InlineKeyboardBuilder()
    skip_keyboard.button(text="‚û°Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_description")
    await message.answer(
        "üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'):",
        reply_markup=skip_keyboard.as_markup()
    )
    await state.set_state(AddProduct.entering_description)

# –®–∞–≥ 5.1: –ü—Ä–æ–ø—É—Å–∫ –æ–ø–∏—Å–∞–Ω–∏—è
@router.callback_query(F.data == "skip_description", AddProduct.entering_description)
async def skip_description_handler(callback: CallbackQuery, state: FSMContext):
    await state.update_data(description="")
    await callback.message.edit_text("üí∞ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 150.50):")
    await state.set_state(AddProduct.entering_price)
    await callback.answer()

# –®–∞–≥ 5.2: –í–≤–æ–¥ –æ–ø–∏—Å–∞–Ω–∏—è
@router.message(AddProduct.entering_description)
async def process_description(message: Message, state: FSMContext):
    await state.update_data(description=message.text)
    await message.answer("üí∞ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 150.50):")
    await state.set_state(AddProduct.entering_price)

# –®–∞–≥ 6: –í–≤–æ–¥ —Ü–µ–Ω—ã
@router.message(AddProduct.entering_price)
async def process_price(message: Message, state: FSMContext):
    try:
        price = float(message.text)
        if price <= 0:
            await message.answer("–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
            return
        await state.update_data(price=price)
        await message.answer("‚öôÔ∏è –í–≤–µ–¥–∏—Ç–µ RCON-–∫–æ–º–∞–Ω–¥—É –¥–ª—è –≤—ã–¥–∞—á–∏ —Ç–æ–≤–∞—Ä–∞:")
        await state.set_state(AddProduct.rcon_command)
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è —Ü–µ–Ω—ã.")

# –®–∞–≥ 7: –í–≤–æ–¥ RCON-–∫–æ–º–∞–Ω–¥—ã
@router.message(AddProduct.rcon_command)
async def process_rcon_command(message: Message, state: FSMContext):
    await state.update_data(rcon_command=message.text)
    await message.answer("üî¢ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –≤ –æ–¥–Ω–æ–π –ø–æ–∫—É–ø–∫–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 100). –í–≤–µ–¥–∏—Ç–µ 1 –¥–ª—è –ø–æ—à—Ç—É—á–Ω—ã—Ö.")
    await state.set_state(AddProduct.entering_count)

# –®–∞–≥ 8: –í–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
@router.message(AddProduct.entering_count)
async def process_count(message: Message, state: FSMContext):
    try:
        count = int(message.text)
        if count <= 0:
            await message.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
            return
        await state.update_data(count=count)
        await message.answer("‚≠ê –í–≤–µ–¥–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ (–æ—Ç 1 –¥–æ 6). –í–≤–µ–¥–∏—Ç–µ 1, –µ—Å–ª–∏ –∫–∞—á–µ—Å—Ç–≤–æ –Ω–µ –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è.")
        await state.set_state(AddProduct.entering_quality)
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.")

# –®–∞–≥ 9: –í–≤–æ–¥ –∫–∞—á–µ—Å—Ç–≤–∞ (–§–ò–ù–ê–õ)
@router.message(AddProduct.entering_quality)
async def process_quality(message: Message, state: FSMContext):
    try:
        quality = int(message.text)
        if not 1 <= quality <= 6:
            await message.answer("–ö–∞—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º –æ—Ç 1 –¥–æ 6.")
            return
        await state.update_data(quality=quality)
        data = await state.get_data()
        db.add_product(
            name=data['name'],
            description=data['description'],
            price=data['price'],
            count=data['count'],
            quality=data['quality'],
            rcon_command=data.get('rcon_command'),
            category_id=data['category_id'],
            subcategory_id=data.get('subcategory_id')
        )
        await message.answer("‚úÖ –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!", reply_markup=admin_products_menu())
        await state.clear()
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 6.")


# =================================================================================
# ### 5. –£–ü–†–ê–í–õ–ï–ù–ò–ï –ö–ê–¢–ï–ì–û–†–ò–Ø–ú–ò ###
# =================================================================================
# (–ó–¥–µ—Å—å –±—É–¥–µ—Ç –≤–∞—à –∫–æ–¥ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π)


# =================================================================================
# ### 6. –£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–û–î–ö–ê–¢–ï–ì–û–†–ò–Ø–ú–ò ###
# =================================================================================

# –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–∫–Ω–æ–ø–∫–∞ –≤–Ω—É—Ç—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏)
@router.callback_query(CategoryCallback.filter(F.action == "add_sub_here"))
async def start_adding_subcategory_here(callback: CallbackQuery, callback_data: CategoryCallback, state: FSMContext):
    category_id = callback_data.id
    await state.update_data(category_id=category_id)
    await callback.message.edit_text("üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–π –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏:")
    await state.set_state(AddSubcategory.entering_name)
    await callback.answer()

@router.message(AddSubcategory.entering_name)
async def process_subcategory_name_here(message: Message, state: FSMContext):
    data = await state.get_data()
    category_id = data.get('category_id')
    subcategory_name = message.text
    if category_id:
        db.add_subcategory(name=subcategory_name, category_id=category_id)
        await message.answer(f"‚úÖ –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è '{subcategory_name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!", reply_markup=admin_main_menu())
    else:
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    await state.clear()