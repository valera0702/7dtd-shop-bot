from aiogram import Router, F, Bot
from aiogram.filters import Command, CommandObject
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.context import FSMContext
from states import PaymentStates, PromoStates, UserStates
from database import db
from handlers.payment_handlers import create_crypto_invoice, get_current_usdt_rate
from datetime import datetime
from aiogram.filters.callback_data import CallbackData

from keyboards import balance_menu, confirm_payment_keyboard

class CategoryCallback(CallbackData, prefix="category"):
    id: int
    action: str

class ProductCallback(CallbackData, prefix="product"):
    id: int
    action: str

router = Router()

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (ReplyKeyboard)
def main_menu_kb():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üõí –ú–∞–≥–∞–∑–∏–Ω"), KeyboardButton(text="üí∞ –ë–∞–ª–∞–Ω—Å")],
            [KeyboardButton(text="üë• –†–µ—Ñ–µ—Ä–∞–ª—ã"), KeyboardButton(text="üõí –ö–æ—Ä–∑–∏–Ω–∞")],
            [KeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
        ],
        resize_keyboard=True
    )

# Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞
def shop_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="show_categories")],
        [InlineKeyboardButton(text="üõí –ú–æ—è –∫–æ—Ä–∑–∏–Ω–∞", callback_data="show_cart")]
    ])

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –±–∞–ª–∞–Ω—Å–∞


# –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥ –≤ –º–∞–≥–∞–∑–∏–Ω"
def back_to_shop_kb():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üõí –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–∞–≥–∞–∑–∏–Ω", callback_data="back_to_shop")]
    ])
@router.message(Command("start"))
async def cmd_start(message: Message, command: CommandObject = None, state: FSMContext = None):
    current_state = await state.get_state()
    
    if current_state == PaymentStates.waiting_payment_confirmation:
        await handle_start_during_payment(message, state)
        return
    user_id = message.from_user.id
    is_new_user = db.add_user(user_id)
    bot_info = await message.bot.get_me()
    bot_username = bot_info.username
    
    ref_bonus = 0
    ref_message = ""
    
    if command and command.args and command.args.startswith("ref"):
        try:
            referrer_id = int(command.args[3:])
            
            if referrer_id == user_id:
                ref_message = "\n‚ùå –ù–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É!"
                
            elif not is_new_user:
                ref_message = "\n‚ùå –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –¥–µ–π—Å—Ç–≤—É–µ—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
                
            elif db.get_referrer(user_id) is not None:
                ref_message = "\n‚ùå –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ"
                
            else:
                db.add_referral(referrer_id, user_id)
                ref_bonus = 0
                db.update_balance(user_id, ref_bonus)
                ref_message = f"\nüéÅ –ü–æ–ª—É—á–µ–Ω–æ –±–æ–Ω—É—Å–æ–≤ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é: {ref_bonus} RUB"
                db.update_balance(referrer_id, 50)  # 100 RUB –∑–∞ –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏–µ
                
                try:
                    await message.bot.send_message(
                        referrer_id,
                        f"üéâ –ù–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ!\n"
                        f"üë§ ID: {user_id}\n"
                        f"üí∞ –í—ã –ø–æ–ª—É—á–∏–ª–∏ 50 RUB –∑–∞ –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏–µ!\n"
                        f"üë• –í—Å–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {db.get_referrals_count(referrer_id)}"
                    )
                except:
                    pass
                    
        except ValueError:
            ref_message = "\n‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞"

    ref_link = f"https://t.me/umbrella_x1_shop_bot?start=ref{user_id}"
    welcome_text = (
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω —Å–µ—Ä–≤–µ—Ä–∞ 7 Days to Die!\n"
        f"{ref_message}\n\n"
        f"üë• –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n{ref_link}\n\n"
        "–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ:\n"
        "- 50 RUB –∑–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≤–ª–µ—á–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
        "- 10% —Å –∏—Ö –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π –±–∞–ª–∞–Ω—Å–∞!"
    )
    await message.answer(welcome_text, reply_markup=main_menu_kb())

@router.message(F.text == "üõí –ú–∞–≥–∞–∑–∏–Ω")
async def shop_menu(message: Message):
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=shop_keyboard()
    )

@router.message(F.text == "üí∞ –ë–∞–ª–∞–Ω—Å")
async def show_balance_menu(message: Message):
    balance = db.get_balance(message.from_user.id)
    await message.answer(
        f"üí≥ –í–∞—à –±–∞–ª–∞–Ω—Å: {balance:.2f} RUB",
        reply_markup=balance_menu()
    )

@router.message(F.text == "üõí –ö–æ—Ä–∑–∏–Ω–∞")
async def show_cart_handler(message: Message):
    await show_cart(message)

# –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –º–∞–≥–∞–∑–∏–Ω–∞ —á–µ—Ä–µ–∑ Inline –∫–Ω–æ–ø–∫–∏
@router.callback_query(F.data == "show_categories")
async def show_categories(callback: CallbackQuery):
    categories = db.get_all_categories()
    if not categories:
        await callback.message.edit_text("–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã")
        return
    
    buttons = [
        [InlineKeyboardButton(text=cat['name'], callback_data=CategoryCallback(id=cat['id'], action="view").pack())]
        for cat in categories
    ]
    buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_shop")])
    
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons))
    await callback.answer()

@router.callback_query(CategoryCallback.filter(F.action == "view"))
async def show_category_products(callback: CallbackQuery, callback_data: CategoryCallback):
    category = db.get_category(callback_data.id)
    products = db.get_products_by_category(callback_data.id)
    
    if not products:
        await callback.answer("–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤")
        return
    
    text = f"<b>{category[1]}</b>\n{category[2] or '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}"
    buttons = [
        [InlineKeyboardButton(
            text=f"{p[1]} - {p[3]} —Ä—É–±",
            callback_data=ProductCallback(id=p[0], action="view").pack())]
        for p in products
    ]
    buttons.append([
        InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="show_categories"),
        InlineKeyboardButton(text="üõí –ö–æ—Ä–∑–∏–Ω–∞", callback_data="show_cart")
    ])
    
    await callback.message.edit_text(text, reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons), parse_mode="HTML")
    await callback.answer()

@router.callback_query(ProductCallback.filter(F.action == "view"))
async def show_product_details(callback: CallbackQuery, callback_data: ProductCallback):
    product = db.get_product(callback_data.id)
    if not product:
        await callback.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    text = (
        f"<b>{product[1]}</b>\n\n"
        f"<i>{product[2] or '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}</i>\n\n"
        f"üíµ –¶–µ–Ω–∞: <b>{product[3]} —Ä—É–±</b>\n"
    )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É", callback_data=ProductCallback(id=product[0], action="add_to_cart").pack())],
        [
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=CategoryCallback(id=product[5], action="view").pack()),
            InlineKeyboardButton(text="üõí –ö–æ—Ä–∑–∏–Ω–∞", callback_data="show_cart")
        ]
    ])
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    await callback.answer()

@router.callback_query(ProductCallback.filter(F.action == "add_to_cart"))
async def add_to_cart(callback: CallbackQuery, callback_data: ProductCallback):
    db.add_to_cart(callback.from_user.id, callback_data.id)
    product = db.get_product(callback_data.id)
    
    text = (
        f"<b>{product[1]}</b>\n\n"
        f"‚úÖ –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!\n\n"
        f"<i>{product[2] or ''}</i>"
    )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üõí –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É", callback_data="show_cart")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=CategoryCallback(id=product[5], action="view").pack())]
    ])
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    await callback.answer()

# –í –æ—Å–Ω–æ–≤–Ω–æ–º –∫–æ–¥–µ –±–æ—Ç–∞ - –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è show_cart
async def show_cart(message: Message):
    user_id = message.from_user.id
    cart_items = db.get_cart_items(user_id)
    
    if not cart_items:
        await message.answer("üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞", reply_markup=back_to_shop_kb())
        return
    
    total = 0
    text = "<b>üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞</b>\n\n"
    for item in cart_items:
        # item[0] - –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞, item[1] - —Ü–µ–Ω–∞, item[2] - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        name = item[0]
        price = item[1]
        quantity = item[2]
        item_total = price
        text += f"‚Ä¢ {item_total} —Ä—É–±\n"
        total += item_total
    
    text += f"\n<b>–ò—Ç–æ–≥–æ: {total} —Ä—É–±</b>"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí≥ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="checkout")],
        [InlineKeyboardButton(text="üßπ –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É", callback_data="clear_cart")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_shop")]
    ])
    
    await message.answer(text, reply_markup=keyboard, parse_mode="HTML")

@router.callback_query(F.data == "show_cart")
async def show_cart_callback(callback: CallbackQuery):
    await show_cart(callback.message)

@router.callback_query(F.data == "back_to_shop")
async def back_to_shop(callback: CallbackQuery):
    await show_categories(callback)

@router.callback_query(F.data == "checkout")
async def process_checkout(callback: CallbackQuery):
    user_id = callback.from_user.id
    nickname = db.get_user_nickname(user_id)
    if not nickname:
        await callback.message.edit_text("‚ùå –î–ª—è –∑–∞–∫–∞–∑–∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è –∏–≥—Ä–æ–≤–æ–π –Ω–∏–∫\n–í–≤–µ–¥–∏—Ç–µ /register", reply_markup=back_to_shop_kb())
        await callback.answer()
        return
    
    cart_items = db.get_cart_items(user_id)
    total = sum(item[2] * item[3] for item in cart_items)
    balance = db.get_balance(user_id)
    
    if balance < total:
        await callback.message.edit_text(
            f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!\n–ë–∞–ª–∞–Ω—Å: {balance} —Ä—É–±\n–¢—Ä–µ–±—É–µ—Ç—Å—è: {total} —Ä—É–±",
            reply_markup=back_to_shop_kb()
        )
        await callback.answer()
        return
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –Ω–∞ —Å–µ—Ä–≤–µ—Ä (–∑–∞–≥–ª—É—à–∫–∞)
    for item in cart_items:
        product = db.get_product(item[0])
        print(f"EXECUTE: {product[4].format(nickname=nickname, quantity=item[3])}")
    
    db.update_balance(user_id, -total)
    db.clear_cart(user_id)
    await callback.message.edit_text(
        f"‚úÖ –ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω!\n–ò–≥—Ä–æ–∫: {nickname}\n–°—É–º–º–∞: {total} —Ä—É–±",
        reply_markup=back_to_shop_kb()
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –±–∞–ª–∞–Ω—Å–∞
@router.callback_query(F.data == "show_balance")
async def show_balance_inline(callback: CallbackQuery):
    balance = db.get_balance(callback.from_user.id)
    await callback.message.edit_text(
        f"üí≥ –í–∞—à –±–∞–ª–∞–Ω—Å: {balance:.2f} RUB",
        reply_markup=balance_menu()
    )
    await callback.answer()

@router.callback_query(F.data == "topup_balance")
async def request_payment_amount(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("üí∞ –£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –≤ —Ä—É–±–ª—è—Ö:")
    await state.set_state(PaymentStates.waiting_for_amount)
    await callback.answer()

@router.callback_query(F.data == "enter_promo")
async def request_promocode(callback: CallbackQuery, state: FSMContext):
    await state.set_state(PromoStates.waiting_promo_input)
    await callback.message.answer("üîë –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥:")
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π
@router.message(PaymentStates.waiting_for_amount)
async def process_payment_amount(message: Message, state: FSMContext):
    try:
        amount = float(message.text)
        if amount < 1 or amount > 20000:
            await message.answer("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 1 –¥–æ 20 000 RUB")
            return
        
        usdt_rate = await get_current_usdt_rate()
        usdt_amount = amount / usdt_rate
        invoice = await create_crypto_invoice(usdt_amount, message.from_user.id)
        
        if not invoice or not invoice.get('ok'):
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á–µ—Ç–∞")
            await state.clear()
            return
        
        pay_url = invoice['result']['pay_url']
        await state.update_data(
            invoice_id=invoice['result']['invoice_id'],
            pay_url=pay_url,
            amount=amount,
            usdt_amount=usdt_amount
        )
        await state.set_state(PaymentStates.waiting_payment_confirmation)
        

        
        await message.answer(
            f"üí∏ –°—á–µ—Ç –Ω–∞ —Å—É–º–º—É {amount} RUB —Å–æ–∑–¥–∞–Ω!\n"
            f"ü™ô –≠–∫–≤–∏–≤–∞–ª–µ–Ω—Ç –≤ USDT: {usdt_amount:.4f}\n\n"
            "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É'",
            reply_markup=confirm_payment_keyboard(pay_url=pay_url)
        )
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")

@router.message(PromoStates.waiting_promo_input)
async def process_promocode(message: Message, state: FSMContext):
    promo_code = message.text.strip()
    promo_info = db.get_promocode(promo_code)
    
    if not promo_info:
        await message.answer("‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await state.clear()
        return
    
    promo_id, _, promo_type, value, expiration, max_uses, used_count = promo_info
    user_id = message.from_user.id
    
    if expiration and datetime.now() > datetime.fromisoformat(expiration):
        await message.answer("‚åõÔ∏è –ü—Ä–æ–º–æ–∫–æ–¥ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω")
        await state.clear()
        return
        
    if used_count >= max_uses:
        await message.answer("üö´ –õ–∏–º–∏—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π –∏—Å—á–µ—Ä–ø–∞–Ω")
        await state.clear()
        return
        
    if db.is_promocode_used(user_id, promo_id):
        await message.answer("‚ö†Ô∏è –í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥")
        await state.clear()
        return
        
    if promo_type == "balance":
        db.update_balance(user_id, value)
        db.mark_promocode_used(user_id, promo_id)
        await message.answer(f"üéâ –ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {value} RUB")
    elif promo_type == "discount":
        await state.update_data(discount=value)
        db.mark_promocode_used(user_id, promo_id)
        await message.answer(f"üéâ –ü–æ–ª—É—á–µ–Ω–æ {value}% —Å–∫–∏–¥–∫–∏ –Ω–∞ —Ç–æ–≤–∞—Ä—ã")
    
    await state.clear()

@router.message(F.text == "üë• –†–µ—Ñ–µ—Ä–∞–ª—ã")
async def show_referral_info(message: Message):
    user_id = message.from_user.id
    ref_count = db.get_referrals_count(user_id)
    ref_link = f"https://t.me/umbrella_x1_shop_bot?start=ref{user_id}"
    await message.answer(
        "üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞\n\n"
        f"üîó –í–∞—à–∞ —Å—Å—ã–ª–∫–∞: {ref_link}\n"
        f"üë§ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ: {ref_count}\n\n"
        "üíé –ë–æ–Ω—É—Å—ã:\n"
        "- 50 RUB –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é\n"
        "- 10% —Å –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π"
    )

@router.message(F.text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def back_to_main(message: Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state == PaymentStates.waiting_payment_confirmation:
        data = await state.get_data()
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", url=data['pay_url'])],
            [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_payment")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_payment")]
        ])
        await message.answer(
            "‚ö†Ô∏è –ó–∞–≤–µ—Ä—à–∏—Ç–µ –æ–ø–ª–∞—Ç—É!\n"
            f"–°—É–º–º–∞: {data['amount']} RUB",
            reply_markup=keyboard
        )
        return
        
    await state.clear()
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_kb())

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏–≥—Ä–æ–≤–æ–≥–æ –Ω–∏–∫–∞
@router.message(Command("register"))
async def start_registration(message: Message, state: FSMContext):
    await state.set_state(UserStates.waiting_for_nickname)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∏–≥—Ä–æ–≤–æ–π –Ω–∏–∫:")

@router.message(UserStates.waiting_for_nickname)
async def process_nickname(message: Message, state: FSMContext):
    nickname = message.text.strip()
    if not nickname.isprintable() or len(nickname) < 3 or len(nickname) > 20:
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–∏–∫ (3-20 —Å–∏–º–≤–æ–ª–æ–≤)")
        return
    
    db.update_user_nickname(message.from_user.id, nickname)
    await state.clear()
    await message.answer(f"‚úÖ –ù–∏–∫ {nickname} —Å–æ—Ö—Ä–∞–Ω—ë–Ω!")

# user_handlers.py

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@router.message(F.text == "üõí –ú–∞–≥–∞–∑–∏–Ω")
async def shop_menu_handler(message: Message):
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω! –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=shop_menu())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏"
@router.callback_query(F.data == "show_categories")
async def show_categories_handler(callback: CallbackQuery):
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=categories_keyboard())
    await callback.answer()

# –ü—Ä–æ—Å–º–æ—Ç—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@router.callback_query(F.data.startswith("category_"))
async def show_category_handler(callback: CallbackQuery):
    category_id = int(callback.data.split("_")[1])
    category = db.get_category(category_id)
    
    if not category:
        await callback.answer("‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    subcategories = db.get_subcategories(category_id)
    
    if subcategories:
        await callback.message.edit_text(
            f"üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category['name']}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
            reply_markup=subcategories_keyboard(category_id)
        )
    else:
        # –ï—Å–ª–∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–µ—Ç, —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–≤–∞—Ä—ã
        await show_subcategory_handler(callback, category_id)
    
    await callback.answer()

# –ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@router.callback_query(F.data.startswith("subcategory_"))
async def show_subcategory_handler(callback: CallbackQuery, category_id: int):
    try:
        subcategory_id = int(callback.data.split("_")[1])
    except:
        # –ï—Å–ª–∏ –≤—ã–∑–≤–∞–Ω–æ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –±–µ–∑ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π
        category_id = int(callback.data.split("_")[1])
        products = db.get_products_by_category(category_id)
        subcategory = {"name": db.get_category(category_id)['name']}
    else:
        subcategory = db.get_subcategory(subcategory_id)
        if not subcategory:
            await callback.answer("‚ùå –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
        
        products = db.get_products_by_subcategory(subcategory_id)
    
    if not products:
        await callback.message.edit_text(
            f"üìÇ {subcategory['name']}\n\n–¢–æ–≤–∞—Ä—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç",
            reply_markup=back_to_shop_menu()
        )
        return
    
    builder = InlineKeyboardBuilder()
    for product in products:
        builder.button(text=f"{product['name']} - {product['price']} —Ä—É–±", callback_data=f"product_{product['id']}")
    
    builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="show_categories")
    builder.adjust(1)
    
    await callback.message.edit_text(
        f"üìÇ {subcategory['name']}\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:",
        reply_markup=builder.as_markup()
    )
    await callback.answer()

# –ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–æ–≤–∞—Ä–∞
@router.callback_query(ProductCallback.filter(F.action == "view"))
async def show_product_handler(callback: CallbackQuery, callback_data: ProductCallback):
    product_id = callback_data.id
    product = db.get_product(product_id)

    if not product:
        await callback.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –±—ã–ª —É–¥–∞–ª–µ–Ω.", show_alert=True)
        await callback.message.edit_text("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä –±–æ–ª—å—à–µ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω.")
        return

    price_line = f"üí∞ –¶–µ–Ω–∞: {product['price']} RUB"
    if product['count'] > 1:
        price_line += f" (–∑–∞ {product['count']} —à—Ç.)"
    quality_line = ""
    if product['quality'] > 1:
        quality_line = f"‚≠ê –ö–∞—á–µ—Å—Ç–≤–æ: {product['quality']}\n"
        
    text = (
        f"üõí <b>{product['name']}</b>\n\n"
        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {product['description']}\n"
        f"{quality_line}"
        f"{price_line}"
    )
    builder = InlineKeyboardBuilder()
    builder.button(
        text="üí≥ –ö—É–ø–∏—Ç—å",
        callback_data=ProductCallback(id=product_id, action="buy").pack()
    )
    if product['subcategory_id']:
        builder.button(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É",
            callback_data=SubcategoryCallback(id=product['subcategory_id'], action="view").pack()
        )
    else:
        builder.button(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É",
            callback_data=CategoryCallback(id=product['category_id'], action="view").pack()
        )
    builder.adjust(1)
    await callback.message.edit_text(text, reply_markup=builder.as_markup())
    await callback.answer()

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É
@router.callback_query(F.data.startswith("add_to_cart_"))
async def add_to_cart_handler(callback: CallbackQuery):
    product_id = int(callback.data.split("_")[3])
    user_id = callback.from_user.id
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É
    db.add_to_cart(user_id, product_id)
    
    await callback.answer(f"‚úÖ –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!", show_alert=True)
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É —Ç–æ–≤–∞—Ä–æ–≤
    product = db.get_product(product_id)
    if product and product['subcategory_id']:
        await show_subcategory_handler(callback, subcategory_id=product['subcategory_id'])
    else:
        await show_category_handler(callback, category_id=product['category_id'])

# –ù–∞–≤–∏–≥–∞—Ü–∏—è –Ω–∞–∑–∞–¥
@router.callback_query(F.data == "back_to_shop")
async def back_to_shop_handler(callback: CallbackQuery):
    await callback.message.edit_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω! –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=shop_menu())
    await callback.answer()

@router.callback_query(F.data.startswith("back_to_products_"))
async def back_to_products_handler(callback: CallbackQuery):
    product_id = int(callback.data.split("_")[3])
    product = db.get_product(product_id)
    
    if product and product['subcategory_id']:
        await show_subcategory_handler(callback, subcategory_id=product['subcategory_id'])
    elif product:
        await show_category_handler(callback, category_id=product['category_id'])
    else:
        await back_to_shop_handler(callback)