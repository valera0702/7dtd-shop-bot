import aiohttp
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from config import CRYPTO_PAY_TOKEN
from database import db
import aiohttp
from states import PaymentStates 
from config import REF_BONUS_REGISTRATION, REFERRAL_PERCENT

router = Router()



async def get_current_usdt_rate():
    try:
        async with aiohttp.ClientSession() as session:
            url = "https://api.coingecko.com/api/v3/simple/price?ids=tether&vs_currencies=rub"
            async with session.get(url) as resp:
                data = await resp.json()
                return data['tether']['rub']
    except:
        return 80.0

async def create_crypto_invoice(amount: float, user_id: int):
    async with aiohttp.ClientSession() as session:
        url = "https://pay.crypt.bot/api/createInvoice"
        headers = {"Crypto-Pay-API-Token": CRYPTO_PAY_TOKEN}
        data = {
            "asset": "USDT",
            "amount": str(amount),
            "paid_btn_name": "openBot",  # –ö–Ω–æ–ø–∫–∞ "–û—Ç–∫—Ä—ã—Ç—å –±–æ—Ç–∞" –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã
            "paid_btn_url": "https://t.me/umbrella_x1_shop_bot"  # –°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
        }
        async with session.post(url, headers=headers, json=data) as resp:
            return await resp.json()



@router.callback_query(F.data == "cancel_payment", PaymentStates.waiting_payment_confirmation)
async def cancel_payment(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text("‚ùå –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await callback.answer()

@router.message(F.text == "‚ùå –û—Ç–º–µ–Ω–∞", PaymentStates.waiting_payment_confirmation)
async def cancel_payment_text(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("‚ùå –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=balance_menu())

@router.callback_query(F.data == "confirm_payment", PaymentStates.waiting_payment_confirmation)
async def confirm_payment(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    data = await state.get_data()
    
    if not data.get('invoice_id'):
        await callback.answer("‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—á–µ—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
        
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å—á–µ—Ç–∞
        response = await crypto_pay.check_invoice(data['invoice_id'])
        
        if not response.get('ok') or not response['result']['items']:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞", show_alert=True)
            return
            
        invoice = response['result']['items'][0]
        
        if invoice['status'] == 'paid':
            # –ó–∞—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞
            db.update_balance(user_id, data['amount'])
            new_balance = db.get_balance(user_id)
            
            # –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å
            bonus_text = ""
            referrer_id = db.get_referrer(user_id)
            if referrer_id and db.can_get_referral_bonus(referrer_id, user_id, data['invoice_id']):
                ref_count = db.get_referrals_count(referrer_id)
                bonus_percent = referral_system.calculate_bonus(None)
                bonus = round(data['amount'] * bonus_percent, 2)
                
                db.add_referral_bonus(
                    referrer_id=referrer_id,
                    referral_id=user_id,
                    amount=data['amount'],
                    bonus=bonus,
                    invoice_id=data['invoice_id']
                )
                db.update_balance(referrer_id, bonus)

                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
                try:
                    await callback.bot.send_message(
                        referrer_id,
                        f"üéâ –í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª –ø–æ–ø–æ–ª–Ω–∏–ª –±–∞–ª–∞–Ω—Å!\n"
                        f"üë§ ID: {user_id}\n"
                        f"üí∏ –°—É–º–º–∞: {data['amount']} RUB\n"
                        f"üí∞ –í–∞—à –±–æ–Ω—É—Å: {bonus} RUB\n"
                        f"üí≥ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {db.get_balance(referrer_id)} RUB"
                    )
                except:
                    pass
            
            await callback.message.edit_text(
                f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\n"
                f"üí≥ –í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {data['amount']} RUB\n"
                f"üí∞ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance} RUB"
                f"{bonus_text}",
                reply_markup=None
            )
            await state.clear()
            return
                
        # –ï—Å–ª–∏ –æ–ø–ª–∞—Ç–∞ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞
        await callback.answer(
            "‚ùå –û–ø–ª–∞—Ç–∞ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞. –ï—Å–ª–∏ –≤—ã –æ–ø–ª–∞—Ç–∏–ª–∏, –ø–æ–¥–æ–∂–¥–∏—Ç–µ 2-3 –º–∏–Ω—É—Ç—ã",
            show_alert=True
        )
                
    except Exception as e:
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", show_alert=True)

@router.message(PaymentStates.waiting_payment_confirmation)
async def handle_other_messages(message: Message):
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–ª–∞–ª —á—Ç–æ-—Ç–æ –∫—Ä–æ–º–µ –∫–æ–º–∞–Ω–¥ –æ—Ç–º–µ–Ω—ã
    if message.text != "‚ùå –û—Ç–º–µ–Ω–∞":
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º —Å—á—ë—Ç–∞:\n"
                             "- –ù–∞–∂–º–∏—Ç–µ 'üí≥ –û–ø–ª–∞—Ç–∏—Ç—å' –¥–ª—è –æ–ø–ª–∞—Ç—ã\n"
                             "- '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É' –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã\n"
                             "- '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –æ–ø–ª–∞—Ç—É' –¥–ª—è –æ—Ç–º–µ–Ω—ã")


# –í –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø–æ–∫—É–ø–∫–∏ (–¥–æ–±–∞–≤—å—Ç–µ –≤ payment_handlers.py)

@router.message(F.text == "üõí –ö–æ—Ä–∑–∏–Ω–∞")
async def show_cart(message: Message, state: FSMContext):
    user_id = message.from_user.id
    cart_items = db.get_cart_items(user_id)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–∫–∏–¥–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
    user_data = await state.get_data()
    discount = user_data.get('discount', 0)
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—É–º–º—É —Å —É—á–µ—Ç–æ–º —Å–∫–∏–¥–∫–∏
    total = sum(item[2] * item[3] for item in cart_items)
    discount_amount = total * discount / 100
    final_total = total - discount_amount
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    cart_text = "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n\n"
    for item in cart_items:
        cart_text += f"{item[1]} - {item[2]} RUB x {item[3]}\n"
    
    cart_text += (
        f"\nüíµ –°—É–º–º–∞: {total:.2f} RUB\n"
        f"üéÅ –°–∫–∏–¥–∫–∞: {discount}% ({discount_amount:.2f} RUB)\n"
        f"üí≥ –ò—Ç–æ–≥–æ: {final_total:.2f} RUB"
    )
    
    # ... –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è ...
